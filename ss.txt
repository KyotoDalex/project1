
    words = ["банан", "помидор"]

    filter_text = ParentalKey('ContentBlock.Text')
    # Фраза, которую будем проверять.
    phrase = filter_text.Text.lower().replace(" ", "")

    def distance(a, b):
        "Calculates the Levenshtein distance between a and b."
        n, m = len(a), len(b)
        if n > m:
            # Make sure n <= m, to use O(min(n, m)) space
            a, b = b, a
            n, m = m, n

        current_row = range(n + 1)  # Keep current and previous row, not entire matrix
        for i in range(1, m + 1):
            previous_row, current_row = current_row, [i] + [0] * n
            for j in range(1, n + 1):
                add, delete, change = previous_row[j] + 1, current_row[j - 1] + 1, previous_row[j - 1]
                if a[j - 1] != b[i - 1]:
                    change += 1
                current_row[j] = min(add, delete, change)

        return current_row[n]

    d = {'а': ['а', 'a', '@'],
         'б': ['б', '6', 'b'],
         'в': ['в', 'b', 'v'],
         'г': ['г', 'r', 'g'],
         'д': ['д', 'd'],
         'е': ['е', 'e'],
         'ё': ['ё', 'e'],
         'ж': ['ж', 'zh', '*'],
         'з': ['з', '3', 'z'],
         'и': ['и', 'u', 'i'],
         'й': ['й', 'u', 'i'],
         'к': ['к', 'k', 'i{', '|{'],
         'л': ['л', 'l', 'ji'],
         'м': ['м', 'm'],
         'н': ['н', 'h', 'n'],
         'о': ['о', 'o', '0'],
         'п': ['п', 'n', 'p'],
         'р': ['р', 'r', 'p'],
         'с': ['с', 'c', 's'],
         'т': ['т', 'm', 't'],
         'у': ['у', 'y', 'u'],
         'ф': ['ф', 'f'],
         'х': ['х', 'x', 'h', '}{'],
         'ц': ['ц', 'c', 'u,'],
         'ч': ['ч', 'ch'],
         'ш': ['ш', 'sh'],
         'щ': ['щ', 'sch'],
         'ь': ['ь', 'b'],
         'ы': ['ы', 'bi'],
         'ъ': ['ъ'],
         'э': ['э', 'e'],
         'ю': ['ю', 'io'],
         'я': ['я', 'ya']
         }

    for key, value in d.items():
        # Проходимся по каждой букве в значении словаря. То есть по вот этим спискам ['а', 'a', '@'].
        for letter in value:
            # Проходимся по каждой букве в нашей фразе.
            for phr in phrase:
                # Если буква совпадает с буквой в нашем списке.
                if letter == phr:
                    # Заменяем эту букву на ключ словаря.
                    phrase = phrase.replace(phr, key)

    # Проходимся по всем словам.
    for word in words:
        # Разбиваем слово на части, и проходимся по ним.
        for part in range(len(phrase)):
            # Вот сам наш фрагмент.
            fragment = phrase[part: part + len(word)]
            # Если отличие этого фрагмента меньше или равно 25% этого слова, то считаем, что они равны.
            if distance(fragment, word) <= len(word) * 0.25:
                # Если они равны, выводим надпись о их нахождении.
                print("Найдено", word, "\nПохоже на", fragment)




from django import template


# Create your models here.


class MenuItem(Orderable):
    link_title = models.CharField(
        blank=True,
        null=True,
        max_length=50
    )
    link_url = models.CharField(
        max_length=500,
        blank=True,
        null=True
    )
    link_page = models.ForeignKey(
        'wagtailcore.Page',
        null=True,
        blank=True,
        related_name='+',
        on_delete=models.CASCADE
    )
    open_in_new_tab = models.BooleanField(default=False, blank=True)

    page = ParentalKey('Menu', related_name='menu_items')

    panels = [
        FieldPanel('link_title'),
        FieldPanel('link_url'),
        PageChooserPanel('link_page'),
        FieldPanel('open_in_new_tab')
    ]

    @property
    def link(self):
        if self.link_page:
            return self.link_page.url
        elif self.link_url:
            return self.link_url
        return "#"

    @property
    def title(self):
        if self.link_page and not self.link_title:
            return self.link_page.title
        elif self.link_title:
            return self.link_title
        return "Missing Title"


@register_snippet
class Menu(ClusterableModel):
    title = models.CharField(max_length=100)
    slug = AutoSlugField(populate_from='title', editable=True)
    panels = [
        MultiFieldPanel([
            FieldPanel('title'),
            FieldPanel('slug')
        ], heading='Menu'),
        InlinePanel('menu_items', label='Menu Item')
    ]

    def __str__(self):
        return self.title


# class CatItems(Orderable):
#     page = ParentalKey('NewsCategory', related_name='Items')
#     url_page = models.ForeignKey(
#         'wagtailcore.Page',
#         null=True,
#         blank=True,
#         related_name='+',
#         on_delete=models.CASCADE
#     )
#     open_in_new_tab = models.BooleanField(default=False, blank=True)
#     panels = [
#         PageChooserPanel('url_page'),
#         FieldPanel('open_in_new_tab')
#     ]


# @register_snippet
# class NewsCategory(ClusterableModel):
#     name = models.CharField(max_length=256)
#     slug = models.SlugField(
#         verbose_name='slug',
#         max_length=256,
#         allow_unicode=True,
#         help_text='Помогает определять новость по категории',
#
#     )
#     panels = [
#         FieldPanel('name'),
#         FieldPanel('slug'),
#         InlinePanel('Items', label='CatItem')
#     ]
#
#     class Meta:
#         verbose_name = 'Категория'
#         verbose_name_plural = 'Категория'
#         ordering = ['name']
#
#     def __str__(self):
#         return self.name
#


